/* 循環・重連結リスト（ヘッダ部）*/

/* 関数Purgeと関数RetrieveをList9-7に追加 */

#ifndef ___CircDblLinkedList
#define ___CircDblLinkedList

#include "Member.h"

/*--- ノード ---*/
typedef struct __node {
	Member        data;			/* データ */
	struct __node *prev;		/* 先行ノードへのポインタ */
	struct __node *next;		/* 後続ノードへのポインタ */
} Dnode;

/*--- 循環・重連結リスト ---*/
typedef struct {
	Dnode *head;				/* 先頭ダミーノードへのポインタ */
	Dnode *crnt;				/* 着目ノードへのポインタ */
} Dlist;

/*--- リストを初期化 ---*/
void Initialize(Dlist *list);

/*--- 着目ノードのデータを表示 ---*/
void PrintCurrent(const Dlist *list);

/*--- 着目ノードのデータを表示（改行付き）---*/
void PrintLnCurrent(const Dlist *list);

/*--- 関数compareによってxと一致すると判定されるノードを探索 ---*/
Dnode *Search(Dlist *list, const Member *x,
			  int compare(const Member *x, const Member *y));

/*--- 先頭からn個後ろのノードへのポインタを取得 ---*/
Dnode *Retrieve(Dlist *list, int n);

/*--- 全ノードのデータをリスト順に表示 ---*/
void Print(const Dlist *list);

/*--- 全ノードのデータをリストの逆順に表示 ---*/
void PrintRevese(const Dlist *list);

/*--- 着目ノードを一つ後方に進める ---*/
int Next(Dlist *list);

/*--- 着目ノードを一つ前方に戻す ---*/
int Prev(Dlist *list);

/*--- pが指すノードの直後にノードを挿入 ---*/
void InsertAfter(Dlist *list, Dnode *p, const Member *x);

/*--- 先頭にノードを挿入 ---*/
void InsertFront(Dlist *list, const Member *x);

/*--- 末尾にノードを挿入 ---*/
void InsertRear(Dlist *list, const Member *x);

/*--- pが指すノードを削除 ---*/
void Remove(Dlist *list, Dnode *p);

/*--- 先頭ノードを削除 ---*/
void RemoveFront(Dlist *list);

/*--- 末尾ノードを削除 ---*/
void RemoveRear(Dlist *list);

/*--- 着目ノードを削除 ---*/
void RemoveCurrent(Dlist *list);

/*--- 全ノードを削除 ---*/
void Clear(Dlist *list);

/*--- 比較関数によって等しいとみなせるノードを削除 ---*/
void Purge(Dlist *list, int compare(const Member *x, const Member *y));

/*--- 循環・重連結リストを後始末 ---*/
void Terminate(Dlist *list);

#endif
